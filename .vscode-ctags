!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/e0a976d7/
DEVICE_NAME_SIZE	src/group_manager.h	/^#define DEVICE_NAME_SIZE /;"	d
D_BUF_SIZE	src/main_device.h	/^#define D_BUF_SIZE	/;"	d
D_DEV_MAJOR	src/main_device.h	/^#define D_DEV_MAJOR	/;"	d
D_DEV_MINOR	src/main_device.h	/^#define D_DEV_MINOR	/;"	d
D_DEV_NAME	src/main_device.h	/^#define D_DEV_NAME	/;"	d
D_DEV_NUM	src/main_device.h	/^#define D_DEV_NUM	/;"	d
GROUP_MAX_MINORS	src/group_manager.h	/^#define GROUP_MAX_MINORS /;"	d
GRP_MAN_H	src/group_manager.h	/^#define GRP_MAN_H$/;"	d
GRP_MAX_ID	src/main_device.h	/^#define GRP_MAX_ID	/;"	d
GRP_MIN_ID	src/main_device.h	/^#define GRP_MIN_ID /;"	d
IOCTL_INSTALL_GROUP	src/main_device.h	/^#define IOCTL_INSTALL_GROUP /;"	d
MAIN_DEV_H	src/main_device.h	/^#define MAIN_DEV_H$/;"	d
T_GROUPS_LST	src/main_device.h	/^} T_GROUPS_LST;$/;"	t	typeref:struct:t_groups
T_MAIN_SYNC	src/main_device.h	/^} T_MAIN_SYNC;$/;"	t	typeref:struct:t_main_sync
buffer	src/main_device.h	/^	char buffer[256];						\/\/TODO: adjust$/;"	m	struct:t_main_sync	typeref:typename:char[256]
cdev	src/group_manager.h	/^    struct cdev cdev;           \/\/Characted Device definition  $/;"	m	struct:group_data	typeref:struct:cdev
descriptor	src/group_manager.h	/^    group_t *descriptor;$/;"	m	struct:group_data	typeref:typename:group_t *
deviceID	src/group_manager.h	/^    dev_t deviceID;$/;"	m	struct:group_data	typeref:typename:dev_t
g_buf	src/main_device.h	/^static int g_buf[D_DEV_NUM][D_BUF_SIZE];	\/**< buffer (for sample-code) *\/$/;"	v	typeref:typename:int[][]
g_cdev_array	src/main_device.h	/^static struct cdev *g_cdev_array;			\/**< charactor devices *\/$/;"	v	typeref:struct:cdev *
g_class	src/main_device.h	/^static struct class *g_class;				\/**< device class *\/$/;"	v	typeref:struct:class *
g_dev_major	src/main_device.h	/^static int g_dev_major = D_DEV_MAJOR;		\/**< major# *\/$/;"	v	typeref:typename:int
g_dev_minor	src/main_device.h	/^static int g_dev_minor = D_DEV_MINOR;		\/**< minor# *\/$/;"	v	typeref:typename:int
g_fops	src/main_device.c	/^static struct file_operations g_fops = {$/;"	v	typeref:struct:file_operations	file:
g_fops	src/main_device.h	/^static struct file_operations g_fops;$/;"	v	typeref:struct:file_operations
group	src/main_device.h	/^	group_t group;$/;"	m	struct:t_groups	typeref:typename:group_t
groupExists	src/main_device.c	/^bool groupExists(group_t *group){$/;"	f	typeref:typename:bool
group_data	src/group_manager.h	/^typedef struct group_data {$/;"	s
group_data	src/group_manager.h	/^} group_data;$/;"	t	typeref:struct:group_data
group_id	src/group_manager.h	/^	unsigned int group_id;		\/\/Thread group ID$/;"	m	struct:group_t	typeref:typename:unsigned int
group_map	src/main_device.h	/^	struct idr group_map;$/;"	m	struct:t_main_sync	typeref:struct:idr
group_name	src/group_manager.h	/^	char *group_name;$/;"	m	struct:group_t	typeref:typename:char *
group_operation	src/group_manager.h	/^static struct file_operations group_operation = {$/;"	v	typeref:struct:file_operations
group_t	src/group_manager.h	/^typedef struct group_t {$/;"	s
group_t	src/group_manager.h	/^} group_t;$/;"	t	typeref:struct:group_t
groups_lst	src/main_device.h	/^	T_GROUPS_LST groups_lst;$/;"	m	struct:t_main_sync	typeref:typename:T_GROUPS_LST
initializeMainDevice	src/main_device.c	/^void initializeMainDevice(void){$/;"	f	typeref:typename:void
installGroup	src/main_device.c	/^int installGroup(group_t *new_group_descriptor){$/;"	f	typeref:typename:int
list	src/main_device.h	/^	struct list_head list;$/;"	m	struct:t_groups	typeref:struct:list_head
mainDeviceIoctl	src/main_device.c	/^long int mainDeviceIoctl(struct file *file, unsigned int ioctl_num, unsigned long ioctl_param){$/;"	f	typeref:typename:long int
mainExit	src/main_device.c	/^void mainExit(void)$/;"	f	typeref:typename:void
mainInit	src/main_device.c	/^int mainInit(void)$/;"	f	typeref:typename:int
mainOpen	src/main_device.c	/^static int mainOpen(struct inode *inode, struct file *filep)$/;"	f	typeref:typename:int	file:
mainRead	src/main_device.c	/^static ssize_t mainRead(struct file *filep, char __user *buf, size_t count, loff_t *f_pos)$/;"	f	typeref:typename:ssize_t	file:
mainRelease	src/main_device.c	/^static int mainRelease(struct inode *inode, struct file *filep)$/;"	f	typeref:typename:int	file:
mainStart	src/main.c	/^static int mainStart(void){$/;"	f	typeref:typename:int	file:
mainStop	src/main.c	/^static void mainStop(void){$/;"	f	typeref:typename:void	file:
mainWrite	src/main_device.c	/^static ssize_t mainWrite(struct file *filep, const char __user *buf, size_t count, loff_t *f_pos/;"	f	typeref:typename:ssize_t	file:
main_device	src/main_device.h	/^static T_MAIN_SYNC *main_device;		\/\/Main device structure $/;"	v	typeref:typename:T_MAIN_SYNC *
message_variable	src/group_manager.h	/^    int message_variable;$/;"	m	struct:group_data	typeref:typename:int
minor	src/main_device.h	/^	int minor;								\/**< minor# *\/$/;"	m	struct:t_main_sync	typeref:typename:int
openGroup	src/group_manager.c	/^static int openGroup(struct inode *inode, struct file *file){$/;"	f	typeref:typename:int	file:
readGroupMessage	src/group_manager.c	/^static int readGroupMessage(struct file *file, char __user *user_buffer, size_t size, loff_t *of/;"	f	typeref:typename:int	file:
registerGroupDevice	src/group_manager.c	/^int registerGroupDevice(unsigned int group_id, group_data *grp_data){$/;"	f	typeref:typename:int
sRegisterMainDev	src/main_device.c	/^static int sRegisterMainDev(void)$/;"	f	typeref:typename:int	file:
sUnregisterMainDev	src/main_device.c	/^static void sUnregisterMainDev(void)$/;"	f	typeref:typename:void	file:
sem	src/main_device.h	/^	struct semaphore sem;$/;"	m	struct:t_main_sync	typeref:struct:semaphore
t_groups	src/main_device.h	/^typedef struct t_groups {$/;"	s
t_main_sync	src/main_device.h	/^typedef struct t_main_sync {$/;"	s
unregisterGroupDevice	src/group_manager.c	/^int unregisterGroupDevice(unsigned int group_id){$/;"	f	typeref:typename:int
